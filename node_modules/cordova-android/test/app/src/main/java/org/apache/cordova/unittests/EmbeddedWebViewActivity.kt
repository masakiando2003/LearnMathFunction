/*
       Licensed to the Apache Software Foundation (ASF) under one
       or more contributor license agreements.  See the NOTICE file
       distributed with this work for additional information
       regarding copyright ownership.  The ASF licenses this file
       to you under the Apache License, Version 2.0 (the
       "License"); you may not use this file except in compliance
       with the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing,
       software distributed under the License is distributed on an
       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
       KIND, either express or implied.  See the License for the
       specific language governing permissions and limitations
       under the License.
*/

package org.apache.cordova.unittests

import android.content.Intent
import android.support.v7.app.AppCompatActivity
import android.os.Bundle
import android.util.Log

import org.apache.cordova.ConfigXmlParser
import org.apache.cordova.CordovaInterfaceImpl
import org.apache.cordova.CordovaWebView
import org.apache.cordova.CordovaWebViewImpl
import org.apache.cordova.PluginManager
import org.apache.cordova.engine.SystemWebView
import org.apache.cordova.engine.SystemWebViewEngine
import org.json.JSONException

class EmbeddedWebViewActivity : AppCompatActivity() {

    var webInterface: CordovaWebView
    private val cordovaInterface = CordovaInterfaceImpl(this)
    private val TAG = "CordovaTestActivity"

    @Override
    protected fun onCreate(savedInstanceState: Bundle) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        //Set up the webview
        val parser = ConfigXmlParser()
        parser.parse(this)

        val webView = findViewById(R.id.cordovaWebView) as SystemWebView
        webInterface = CordovaWebViewImpl(SystemWebViewEngine(webView))
        webInterface.init(cordovaInterface, parser.getPluginEntries(), parser.getPreferences())

        webView.loadUrl(parser.getLaunchUrl())
    }

    // This is still required by Cordova
    @Override
    fun onDestroy() {
        super.onDestroy()
        val pluginManager = webInterface.getPluginManager()
        if (pluginManager != null) {
            pluginManager!!.onDestroy()
        }

    }

    /**
     * Called when an activity you launched exits, giving you the requestCode you started it with,
     * the resultCode it returned, and any additional data from it.
     *
     * @param requestCode       The request code originally supplied to startActivityForResult(),
     * allowing you to identify who this result came from.
     * @param resultCode        The integer result code returned by the child activity through its setResult().
     * @param intent            An Intent, which can return result data to the caller (various data can be attached to Intent "extras").
     */
    @Override
    protected fun onActivityResult(requestCode: Int, resultCode: Int, intent: Intent) {
        super.onActivityResult(requestCode, resultCode, intent)
        cordovaInterface.onActivityResult(requestCode, resultCode, intent)
    }

    /**
     * Called by the system when the user grants permissions!
     *
     * Note: The fragment gets priority over the activity, since the activity doesn't call
     * into the parent onRequestPermissionResult, which is why there's no override.
     *
     * @param requestCode
     * @param permissions
     * @param grantResults
     */
    fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>,
                                   grantResults: IntArray) {
        try {
            cordovaInterface.onRequestPermissionResult(requestCode, permissions, grantResults)
        } catch (e: JSONException) {
            Log.d(TAG, "JSONException: Parameters fed into the method are not valid")
            e.printStackTrace()
        }

    }

}
