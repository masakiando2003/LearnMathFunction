/*
       Licensed to the Apache Software Foundation (ASF) under one
       or more contributor license agreements.  See the NOTICE file
       distributed with this work for additional information
       regarding copyright ownership.  The ASF licenses this file
       to you under the Apache License, Version 2.0 (the
       "License"); you may not use this file except in compliance
       with the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing,
       software distributed under the License is distributed on an
       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
       KIND, either express or implied.  See the License for the
       specific language governing permissions and limitations
       under the License.
*/


package org.apache.cordova.unittests

import android.content.Intent
import android.support.test.espresso.web.webdriver.Locator
import android.support.test.rule.ActivityTestRule
import android.support.test.runner.AndroidJUnit4

import org.apache.cordova.CordovaWebView
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

import android.support.test.espresso.Espresso.onView
import android.support.test.espresso.action.ViewActions.click
import android.support.test.espresso.action.ViewActions.pressBack
import android.support.test.espresso.matcher.ViewMatchers.withId
import android.support.test.espresso.web.sugar.Web.onWebView
import android.support.test.espresso.web.webdriver.DriverAtoms.findElement
import android.support.test.espresso.web.webdriver.DriverAtoms.webClick
import junit.framework.Assert.assertEquals
import junit.framework.Assert.assertFalse
import junit.framework.Assert.assertTrue
import junit.framework.Assert.fail

@RunWith(AndroidJUnit4::class)
class IFrameTest {
    private val WEBVIEW_LOAD_DELAY = 500

    private var testActivity: TestActivity? = null

    // Don't launch the activity, we're going to send it intents
    @Rule
    var mActivityRule = ActivityTestRule(
            TestActivity::class.java, true, false)

    @Before
    fun launchApplicationWithIntent() {
        val intent = Intent()
        intent.putExtra("startUrl", START_URL)
        testActivity = mActivityRule.launchActivity(intent) as TestActivity
    }

    @Test
    @Throws(Throwable::class)
    fun iFrameHistory() {
        val cordovaWebView = testActivity!!.getWebInterface() as CordovaWebView
        onWebView().withElement(findElement(Locator.ID, "google_maps")).perform(webClick())
        sleep(WEBVIEW_LOAD_DELAY)
        mActivityRule.runOnUiThread(object : Runnable() {
            fun run() {
                val url = cordovaWebView.getUrl()
                assertTrue(url.endsWith("index.html"))
            }
        })
        sleep(WEBVIEW_LOAD_DELAY)
        onWebView().withElement(findElement(Locator.ID, "javascript_load")).perform(webClick())
        mActivityRule.runOnUiThread(object : Runnable() {
            fun run() {
                val url = cordovaWebView.getUrl()
                assertTrue(url.endsWith("index.html"))
            }
        })
        sleep(WEBVIEW_LOAD_DELAY)
        //Espresso will kill the application and not trigger the backHistory method, which correctly
        //navigates the iFrame history.  backHistory is tied to the back button.
        mActivityRule.runOnUiThread(object : Runnable() {
            fun run() {
                assertTrue(cordovaWebView.backHistory())
                val url = cordovaWebView.getUrl()
                assertTrue(url.endsWith("index.html"))
                assertFalse(cordovaWebView.backHistory())
            }
        })

    }


    //BRUTE FORCE THE CRAP OUT OF CONCURRENCY ERRORS
    private fun sleep(timeout: Int) {
        try {
            Thread.sleep(timeout)
        } catch (e: InterruptedException) {
            fail("Unexpected Timeout")
        }

    }

    companion object {

        private val START_URL = "file:///android_asset/www/iframe/index.html"
        //I have no idea why we picked 100, but we did.
        private val WEBVIEW_ID = 100
    }

}
